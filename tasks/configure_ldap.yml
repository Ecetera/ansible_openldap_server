---

- name: Create the directory for ldap database
  file: path=/var/lib/ldap/{{ openldap_server_domain_name }}/ state=directory owner={{ openldap_server_user }} group={{ openldap_server_user }}

- name: Create the directory for ldap certificates
  file: path={{ openldap_server_app_path }}/certs/ state=directory owner={{ openldap_server_user }} group={{ openldap_server_user }}

- name: Generate the DHE parameter
  command: openssl dhparam 2048 -out dh2048.pem
  args:
    creates: "{{ openldap_server_app_path }}/certs/dh2048.pem"
    chdir: "{{ openldap_server_app_path }}/certs/"

- name: Generate the DSA parameter
  command: "openssl genpkey -genparam -algorithm dsa -pkeyopt dsa_paramgen_bits:2048 -out dsa2048.pem"
  args:
    creates: "{{ openldap_server_app_path }}/certs/dsa2048.pem"
    chdir: "{{ openldap_server_app_path }}/certs/"

- name: Generate the private key for certificate request
  command: "openssl genpkey -out rootCA.key.secure  -aes-128-cbc -paramfile dsa2048.pem -pass pass:rootpassword"
  args:
    creates: "{{ openldap_server_app_path }}/certs/rootCA.key.secure"
    chdir: "{{ openldap_server_app_path }}/certs/"

- name: Strip the passphrase from the CA key
  command: openssl dsa -in rootCA.key.secure -passin pass:rootpassword -out rootCA.key
  args:
    chdir: "{{ openldap_server_app_path }}/certs/"
    creates: "{{ openldap_server_app_path }}/certs/rootCA.key"

- name: Create and sign the the new certificate
  command: >
      openssl req -new -x509 -subj '/C={{ openldap_server_country }}/ST={{ openldap_server_state }}/L={{ openldap_server_location }}/O={{ openldap_server_organization }}/OU={{ openldap_server_organizational_unit }}' \
      -sha256 -passin pass:rootpassword \
      -days 3650 \
      -key rootCA.key \
      -out cacert.crt \
      -extensions v3_ca
  args:
    chdir: "{{ openldap_server_app_path }}/certs/"
    creates: "{{ openldap_server_app_path }}/certs/cacert.crt"

- name: Generate the private key for certificate request
  command: "openssl genpkey -out ldap.key.secure -paramfile dsa2048.pem -aes-128-cbc -pass pass:ldappassword"
  args:
    creates: "{{ openldap_server_app_path }}/certs/ldap.key.secure"
    chdir: "{{ openldap_server_app_path }}/certs/"

- name: Strip the passphrase from the CA key
  command: openssl dsa -in ldap.key.secure -passin pass:ldappassword -out ldap.key
  args:
    chdir: "{{ openldap_server_app_path }}/certs/"
    creates: "{{ openldap_server_app_path }}/certs/ldap.key"

- name: Create a CSR
  command: "openssl req -new -key ldap.key -out ldap.csr -subj '/C={{ openldap_server_country }}/ST={{ openldap_server_state }}/L={{ openldap_server_location }}/O={{ openldap_server_organization }}/OU={{ openldap_server_organizational_unit }} /CN={{ openldap_server_common_name }}/'"
  args:
    chdir: "{{ openldap_server_app_path }}/certs/"
    creates: "{{ openldap_server_app_path }}/certs/ldap.csr"

- name: and sign the the new certificate...
  command: >
      openssl x509 -req -in ldap.csr
      -CA cacert.crt -CAkey rootCA.key -CAcreateserial \
      -sha256 \
      -days 3650 \
      -out ldap.crt \
      -extensions v3_ca
  args:
    chdir: "{{ openldap_server_app_path }}/certs/"
    creates: "{{ openldap_server_app_path }}/certs/ldap.crt"

- name: copy the supporting files
  copy: src=ldap dest=/etc/sysconfig/ldap mode=0755
  when: openldap_server_enable_ssl and ansible_os_family == 'RedHat' and ansible_distribution_major_version < 7
  notify:
   - restart slapd

- name: copy the supporting files
  copy: src=slapd_fedora dest=/etc/sysconfig/slapd mode=0755
  when: openldap_server_enable_ssl and ansible_distribution == "Fedora" or (ansible_os_family == 'RedHat' and ansible_distribution_major_version >= 7)
  notify:
   - restart slapd

- name: copy the supporting files
  copy: src=slapd dest=/etc/default/slapd mode=0755
  when: openldap_server_enable_ssl and ansible_os_family == 'Debian'
  notify:
   - restart slapd

- name: start the slapd service
  service: name=slapd state=started enabled=yes

- name: gather list of schemas
  command: "ldapsearch -Y EXTERNAL -H ldapi:/// -b cn=schema,cn=config cn"
  changed_when: openldap_schemas.rc != 0
  register: openldap_schemas

- name: add additional schemas
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f {{item}}.ldif"
  args:
    chdir: "{{ openldap_server_app_path }}/schema/"
  when: "'{{item}}' not in openldap_schemas.stdout"
  with_items:
    - "corba"
    - "cosine"
    - "duaconf"
    - "dyngroup"
    - "inetorgperson"
    - "java"
    - "misc"
    - "rfc2307bis"
    - "openldap"
    - "ppolicy"
    - "collective"
  notify:
    - restart slapd

- name: Copy the template for creating base dn
  template: src={{ item }} dest=/tmp
  register: output
  with_items:
    - modules.ldif
    - mdb.ldif
    - "{{ openldap_server_ldif }}"
    - info.ldif
    - memberof.ldif

- debug:
    msg: "{{ output }}"

- name: add the base domain
  shell: "ldapadd -Y EXTERNAL -H ldapi:/// -f {{ item.dest }}"
  # when: hdb_db_deleted.changed
  with_items:
    - "{{output.results}}"
  # when: item.changed
  changed_when:
  register: rootdn_created



